// This file was automatically generated by the Soy compiler.
// Please don't edit this file by hand.
// source: src/__tests__/fixtures/simple/index.soy

/**
 * @fileoverview Templates in namespace soy.examples.simple.
 * @suppress {suspiciousCode}
 * @suppress {uselessCode}
 * @suppress {strictMissingProperties} TODO(b/214874268): Remove strictMissingProperties suppression after b/214427036 is fixed
 * @public
 */

goog.provide('soy.examples.simple');
goog.require('goog.soy');
goog.requireType('goog.soy.data.SanitizedHtml');
goog.require('soy');

/**
 * @param {?Object<string, *>=} opt_data
 * @param {(?goog.soy.IjData|?Object<string, *>)=} opt_ijData
 * @return {!goog.soy.data.SanitizedHtml}
 * @suppress {checkTypes}
 */
soy.examples.simple.helloWorld = function (opt_data, opt_ijData) {
  const $ijData = /** @type {!goog.soy.IjData} */opt_ijData;
  if (goog.soy.shouldStub && goog.soy.shouldStubAtRuntime() && soy.examples.simple.helloWorld_soyInternalStubs) {
    return soy.examples.simple.helloWorld_soyInternalStubs(opt_data, $ijData);
  }
  if (goog.DEBUG && soy.$$stubsMap['soy.examples.simple.helloWorld']) {
    return soy.$$stubsMap['soy.examples.simple.helloWorld'](opt_data, $ijData);
  }
  return soy.VERY_UNSAFE.ordainSanitizedHtml('Hello world!');
};
if (false) {
  /**
   * @param {!Object} $$areYouAnInternalCaller
   * @param {!goog.soy.IjData} $ijData
   * @return {!goog.soy.data.SanitizedHtml}
   * @suppress {checkTypes}
   */
  soy.examples.simple.helloWorld_soyInternalStubs;
}
if (goog.DEBUG) {
  /**
   * @nocollapse
   * @type {string}
   */
  soy.examples.simple.helloWorld.soyTemplateName = 'soy.examples.simple.helloWorld';
}

/**
 * @param {?soy.examples.simple.helloName.Params=} opt_data
 * @param {(?goog.soy.IjData|?Object<string, *>)=} opt_ijData
 * @return {!goog.soy.data.SanitizedHtml}
 */
soy.examples.simple.helloName = function (opt_data, opt_ijData) {
  opt_data = opt_data || {};
  const $ijData = /** @type {!goog.soy.IjData} */opt_ijData;
  if (goog.soy.shouldStub && goog.soy.shouldStubAtRuntime() && soy.examples.simple.helloName_soyInternalStubs) {
    return soy.examples.simple.helloName_soyInternalStubs(soy.$$internalCallMarkerDoNotUse, $ijData, opt_data.name);
  }
  return soy.examples.simple.helloName$(soy.$$internalCallMarkerDoNotUse, $ijData, opt_data.name);
};
/**
 * @param {!Object} $$areYouAnInternalCaller
 * @param {!goog.soy.IjData} $ijData
 * @param {null|string|undefined=} p$name
 * @return {!goog.soy.data.SanitizedHtml}
 * @suppress {checkTypes}
 */
soy.examples.simple.helloName$ = function ($$areYouAnInternalCaller, $ijData, p$name) {
  soy.$$areYouAnInternalCaller($$areYouAnInternalCaller);
  if (goog.DEBUG && soy.$$stubsMap['soy.examples.simple.helloName']) {
    return soy.$$stubsMap['soy.examples.simple.helloName']({
      name: p$name
    }, $ijData);
  }
  /** @const {null|string|undefined} */
  const name = soy.assertParamType(p$name == null || typeof p$name === 'string', 'name', p$name, '@param', 'null|string|undefined');
  return soy.VERY_UNSAFE.ordainSanitizedHtml(name ? 'Hello ' + soy.$$escapeHtml(name) + '!' : soy.examples.simple.helloWorld(null, $ijData));
};
if (false) {
  /**
   * @param {!Object} $$areYouAnInternalCaller
   * @param {!goog.soy.IjData} $ijData
   * @param {null|string|undefined=} p$name
   * @return {!goog.soy.data.SanitizedHtml}
   * @suppress {checkTypes}
   */
  soy.examples.simple.helloName_soyInternalStubs;
}
/**
 * @typedef {{
 *  name: (null|string|undefined),
 * }}
 */
soy.examples.simple.helloName.Params;
if (goog.DEBUG) {
  /**
   * @nocollapse
   * @type {string}
   */
  soy.examples.simple.helloName.soyTemplateName = 'soy.examples.simple.helloName';
}

/**
 * @param {!soy.examples.simple.helloNames.Params} opt_data
 * @param {(?goog.soy.IjData|?Object<string, *>)=} opt_ijData
 * @return {!goog.soy.data.SanitizedHtml}
 */
soy.examples.simple.helloNames = function (opt_data, opt_ijData) {
  const $ijData = /** @type {!goog.soy.IjData} */opt_ijData;
  if (goog.soy.shouldStub && goog.soy.shouldStubAtRuntime() && soy.examples.simple.helloNames_soyInternalStubs) {
    return soy.examples.simple.helloNames_soyInternalStubs(soy.$$internalCallMarkerDoNotUse, $ijData, opt_data.names);
  }
  return soy.examples.simple.helloNames$(soy.$$internalCallMarkerDoNotUse, $ijData, opt_data.names);
};
/**
 * @param {!Object} $$areYouAnInternalCaller
 * @param {!goog.soy.IjData} $ijData
 * @param {(!Array<string>|!ReadonlyArray<string>)} p$names
 * @return {!goog.soy.data.SanitizedHtml}
 * @suppress {checkTypes}
 */
soy.examples.simple.helloNames$ = function ($$areYouAnInternalCaller, $ijData, p$names) {
  soy.$$areYouAnInternalCaller($$areYouAnInternalCaller);
  if (goog.DEBUG && soy.$$stubsMap['soy.examples.simple.helloNames']) {
    return soy.$$stubsMap['soy.examples.simple.helloNames']({
      names: p$names
    }, $ijData);
  }
  /** @const {!ReadonlyArray<string>} */
  const names = /** @type {!ReadonlyArray<string>} */soy.assertParamType(Array.isArray(p$names), 'names', p$names, '@param', '!ReadonlyArray<string>');
  let $output = '';
  if (names.length != 0) {
    const name20List = soy.$$asReadonlyArray(names);
    const name20ListLen = name20List.length;
    for (let name20Index = 0; name20Index < name20ListLen; name20Index++) {
      const name20Data = name20List[name20Index];
      $output += soy.examples.simple.helloName$(soy.$$internalCallMarkerDoNotUse, $ijData, name20Data) + (name20Index != names.length - 1 ? '<br' + (goog.DEBUG && soy.$$getDebugSoyTemplateInfo() ? ' data-debug-soy="soy.examples.simple.helloNames src/__tests__/fixtures/simple/index.soy:28"' : '') + '>' : '');
    }
  } else {
    $output += soy.examples.simple.helloWorld(null, $ijData);
  }
  return soy.VERY_UNSAFE.ordainSanitizedHtml($output);
};
if (false) {
  /**
   * @param {!Object} $$areYouAnInternalCaller
   * @param {!goog.soy.IjData} $ijData
   * @param {(!Array<string>|!ReadonlyArray<string>)} p$names
   * @return {!goog.soy.data.SanitizedHtml}
   * @suppress {checkTypes}
   */
  soy.examples.simple.helloNames_soyInternalStubs;
}
/**
 * @typedef {{
 *  names: (!Array<string>|!ReadonlyArray<string>),
 * }}
 */
soy.examples.simple.helloNames.Params;
if (goog.DEBUG) {
  /**
   * @nocollapse
   * @type {string}
   */
  soy.examples.simple.helloNames.soyTemplateName = 'soy.examples.simple.helloNames';
}